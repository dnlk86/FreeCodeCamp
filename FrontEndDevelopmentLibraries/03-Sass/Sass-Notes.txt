- Sass, syntactically awesome stylesheets, is a language extension of css (it extends vanilla css features), allows to use variables,
    nest css, add logic and loops and more.
- Variables are defined in sass using the $ sign followed by the variable name: $heading-color: green;
    It uses a syntax similar to js except for the dollar sign and the colon instead of the assignment operator.
- Sass allows, unlike vanilla css, to nest css rules, this helps organizing the code:
    nav {
        background-color: red;
            ul {
                list-style: none;
                    li {
                        display: inline-block;
                    }
            }
    }
- In sass mixins are groups of css declarations that can be reused in multiple places of the stylesheet. Mixins are like functions
    for css:
        @mixin box-shadow($x, $y, $blur, $c){               \\ @mixin keyword followed by a custom name
            -webkit-box-shadow: $x $y $blur $c;
            -moz-box-shadow: $x $y $blur $c;
            -ms-box-shadow: $x $y $blur $c;
            box-shadow: $x $y $blur $c;
        }
- A mixin is called with the @include keayword:
    @include box-shadow(0px, 0px, 4px, #fff);
- @If statements in sass work just like in js:
    @mixin border-stroke($val){
        @if $val == light {
            border: 1px solid black;  
        } @else if $val == medium {
            border: 3px solid black;
        } @else if $val == heavy {
            border: 6px solid black;
        } @else {
            border: none;
        }
    }
- The @for directive adds styles in a loop. There are two types of for loops, start through end where the end num is included, 
    and start to end where end is not included as part of the count:
        @for $i from 1 through 12 {
             .col-#{$i} { width: 100%/12 * $i; }        \\ the #[$i] syntax is used to create a string combining the variable $i
        }                                               \\ and the string col-     -> example col-2
- The @each directive is used to loop over items in a list or map:
    @each $color in red, green, blue {                  \\ looping through a list
        .#{$color}-text {color: $color;}
    }

    $colors: (color1: blue, color2: red, color3: green);
    @each $key, $color in $colors {                     \\ looping through a map (obj)
        .#{$color}-text {color: $color;}
    }
- The @while directive like in js is used to apply a style until a certain condition is met:
    $x: 1;
    @while $x < 6 {
        .text-#{$x} { font-size: $x*15px;}
        $x: $x + 1;
    }
- Partials are separate files holding segments of css code that are then imported and used in other sass files. Names for Partials
    start with an underscore (_) and end up with .scss file extension. To bring code in another file the @import directive is used.
    In the import statement the underscore is not needed:
        _variables.scss             \\ that's the partial file
        @import "variables"
- The @extend directive, as the name suggests, allows to borrow the styling rules from one element and build upon the in another:
    .panel {
        background-color: red;
        width: 100%;
    }

    .tall-panel {
        @extend .panel;
        height: 100vh;          \\ tall-panel has the same properties of panel and also has a specific height
    }
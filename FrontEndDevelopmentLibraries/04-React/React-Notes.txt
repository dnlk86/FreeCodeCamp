- React is an open source view library created by facebook used to build user interfaces (UI) of web applications.
- React's syntax, called JSX, allows to write HTML directly within JS code. This allows to use all the programmatic features of JS in HTML.
- A .jsx file is an extension of regular JS, it's possible to use all the core JS features, including ES6. To write JS code in the file
    it has to be included within curly braces { js code goes here... }.
- JSX is not valid JS, so it has to be compiled into JavaScript. The Babel transpiler is a popular tool to do this.
- Nested JSX must return one single thing: 
    const JSX = <div>
                    <p>Paragraph One</p>            \\ 3 paragraphs without a parent div wrapping them would not transpile
                    <p>Paragraph Two</p>
                    <p>Paragraph Three</p>
                </div>
- Comments in JSX are done with: {/* this is a comment */}
- JSX can be rendered directly in the HTML DOM by using the react rendering API called ReactDOM. This API provides a method called
    .render() that accepts two arguments, the first is the component to render, and the second is the DOM node where the JSX component
    has to be rendered:
        ReactDOM.render(JSX, document.getElementById('root'))    \\ this places the JSX in the react lightweight representation of the DOM
- A key diffence in JSX compared to HTML is that it's no longer possible to use the keyword class inside elements and it has to be used
    the keyword className instead. In general the naming convention for all HTML attributes becomes lower camelCase in JSX.
- Another difference is the idea of self-closing tags. Most HTML elements have an opening and a closing tag. In JSX any element can be
    written with a self-closing tag and element must be closed, so while it is possible to write <br> in HTML, in JSX it has to be <br />.
- Everything in React is a component. The first way to create a component is to use a JS function. Such a component is called stateless
    functional component, where stateless indicates that the function receives data to render but does not track or manage the changes to
    the data. The function has simply to return JSX or null and the name has to be in UpperCamelCase:
    const MyComponent = function() {
        return (
            <div className="comp_1">
                some text...
            </div>
        );
    }; 
- The second way to create a react component is with the ES6 class syntax:
    class MyComponent extends React.Component {     \\ MyComponent inherits the features of React.Component
        constructor(props) {                        
            super(props);                           \\ The constructor uses the super() method to call the constructor of the parent
        }                                           \\ class, in this case React.Component. The constructor is used during initialization
                                                    \\ of an instance of MyComponent.
        render() {
            return (
                <h1>My component</h1>
            );
        }
    }
- Multiple components can be composed together, this can be done by including the component name written as a custom HTML tag in the JSX:
    return (
        <App>
            <Navbar />              \\ combined 3 child components to the "App" parent component
            <Dashboard />
            <Footer />
        </App>
    )
- When working with React it is important to start thinking about user interface in terms of components composition. This way the UI
    can be broken down in basic building blocks, and the code responsible for the UI can be separated from the application logic.
- In react rendering JSX elements with stateless functional components or with ES6 style class components makes no difference in terms
    of the outcome.
- React components are passed to the render() method a little different than JSX elements. For JSX the name of the element is passed.
    For react components the syntax is like the one used to nest components within each other:
        ReactDOM.render(<App />, document.getElementById("someID"));
- In react it is possible to pass props, or properties, from parent components to their childs. To this end react allows to create
    custom HTML attributes in order to pass down the properties and their values:
        <App>
            <Welcome user="Mark" />
        </App>
    In this case the stateless functional component Welcome looks like this:
        const Welcome = (props) => <h1>Hello, {props.user}</h1>     \\ standard practice is to call these values props
                                                                    \\ props is basically an argument to a function that returns JSX 
- Also arrays can be passed down to child components as props. Since arrays are JS data structures, the props need to be passed inside
    curly braces, and it is possible to use arrays methods on the prop as well.
- DefaultProps allow to set a default value in case no value is provided to the component:
    const Items = (props) => {
        return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
    }

    Items.defaultProps = { quantity: 0 };
- Explicitly setting a prop value will override a default prop.
- The propType property is a usefull feature that sets the expected prop type of a component. It is defined the same way as 
    defaultProps are defined:
        MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }  \\ here it's checked if a function is passed with
                                                                            \\ "propType.func". isRequired tells react that handleClick
                                                                            \\ is a required property.
- In order to pass props down to ES6 class styled component the syntax is slighlty different compared to stateless functional components.
    Anytime refering to a class component within itself the "this" keyword is needed:
        {this.props.propName}
- A stateless functional component is any function you write which accepts props and returns JSX.
- A stateless component, on the other hand, is a ES6 class that extends React.Component, but does not use internal state.
- A stateful component is a class component that does maintain its own internal state. State is any data that the application needs
    to know about and can change over time. The application needs to respond to those changes and adapt the UI is needed
- A statefull component is created by creating a state property in the class constructor. When the component is initialized so is the
    state. The state property must be a js object:
        constructor(props) {
            super(props);
            this.state = {}
        }
- React uses what is called virtual DOM to keep track of state changes, when state in a component changes, the component itself is 
    re-rendered and also the child components that receive that data as prop.
- State is completely encapsulated (it local to the component) and no other component except those child where it is passed as a prop 
    can have access to it.
- React provides a method to change the state called setState(). This method can be called within the component with the syntax:
    this.setState()     \\ an object has to be passed in
- React expects the state to be modified only via the setState method, and never directly accessing it.
    class MyComponent extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                name: 'Initial State'
                };
            this.handleClick = this.handleClick.bind(this);                 \\ by binding this to the handleClick method in the
        }                                                                   \\ constructor, the handleClick method later declared
        handleClick() {                                                     \\ can have acces to properties on the class such as
            this.setState( {name: "React Rocks!"} );                        \\ props and state
        }
        render() {
            return (
            <div>
                <button onClick={this.handleClick}>Click Me</button>        \\ the onClick handler runs the handleClick method
                <h1>{this.state.name}</h1>                                  \\ that is responsible for invoking setState and changing
            </div>                                                          \\ the state to a new value
            );
        }
    };
- In order to change the state with setState() the best practice is to pass setState a callback function that accept state and props as
    argument and that handles the change. This is done since state updates may be asynchronous, so multiple updates can occur at the 
    same time. Using setState with a function guarantees to be working with the latest values of state and props:
        this.setState((state, props) => ({
            counter: state.counter + props.increment
        }));
- React can control the internal state of certain elements such as inputs, forms, this makes them controlled components. This is done
    by having handler functions that setState when certain events occur.
- The event.preventDefault() method prevent the default submit behavior of forms, that refreshes the page once the form is submitted.
    It has to be included in the submit handler.
- State flows in one direction (unidirectional data flow) down the tree of an application, from a stateful parent component to a child 
    component. This separation of state logic from UI logic is one of React's key principles.
- It is also possible to pass handler functions or any method that is defined in the parent component as props down to the child component.
    The access to those props is done with the usual syntax {this.props.somePropName}.
- Lifecycle methods or hooks are special methods that perform certain actions at specific points in the lifecycle of a react component.
    This can be before the component is rendered, before it updates, before it receives a prop or before it unmounts and so on.
    Here the main lifecycle hooks:
        componentWillMount() componentDidMount() shouldComponentUpdate() componentDidUpdate() componentWillUnmount()
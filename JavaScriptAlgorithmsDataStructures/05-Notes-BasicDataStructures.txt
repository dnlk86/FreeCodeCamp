- The array is a data structure, its simplest form is the one-dimensional array, meaning that it only has one level (no nested arrays 
    it only contains other valid JS data types).
- Multi-dimensional arrays ([]) contain other arrays or JS objects ({}).
- The fundamental feature of any data structure is, of course, the ability to not only store data, but to be able to retrieve that 
    data on command. This can be done with the bracket notation and the use of indexes in arrays (zero-indexed) for example.
    Pre-existing data can be also accessed and modified in the same way.
- Arrays are mutable, their content hence their length can be modified. Elements can be added with the methods .unshift() at the front
    and .push() at the end of the array. Both can add multiple elements at the same time.
- In the same way elements can be removed, from the front of the array with the .shift() method or from the end with the .pop() method.
    Both methods return the removed element. Both remove just one element at the time and do not take parameters.
- To remove any number of consecutive elements from anywhere in an array there is the method .splice() that takes two parameters,
    the index where to start removing (inclusive) and the number of consecutive elements to remove. The .splice() method both
    modifies the original array and also returns the removed elements in a new array.
- The third parameter that .splice() can accept is used to add new elements to the array. So the method allows to quickly switch out
    an element or a set of elements with a new one:
        arr.splice(startIndex, elementsToDelete, firstNewEl, secondNewEl, ..., nthNewEl);
- The .slice() method extracts/copies a subset of an array, not modifiying the original array it's called upon. It takes two parameters,
    the index where to start the extraction and the index where to stop (the element at this index is not included).
- On the other hand the spread operator (...arrName) allows to copy all the elements(just the content of the arr) of an array in order.
- A huge advantage of the spread operator is the possibility tom combine multiple arrays:
    const arr2 = [1, 2, "a", ...arr1, 3];       \\ note that ...arr1 are just the elements of arr1
- Since arrays are mutable data structures it's important to be able to verify the existence of elements. That is achieved by the 
    .indexOf() method, which takes an element as argument and returns the index of that element. In case the element is not found
    it returns -1.
- There are different ways to iterate through arrays in JS, like the methods .every(), .forEach(), .map(), etc however the most flexible
    and the one the offers the greatest amount of control is the simple for loop.
- Objects are at their core collections of key-value pairs. In other terms pieces of data(values) mapped to unique identifiers called
    properties(keys).
- Adding a property to an object can be done with the dot notation (myObj.newProperty = "someVal";) or with the bracket notation
    (myObj["newProperty"] = "someVal";). The bracket notation is required if the property has a space in it(my new property: "something").
    Passing a name in the bracket notation without the quotes will be evaluated as a variable and its content passed as the prop name.
- Objects can be nested to an arbitrary depth and their values can be any type of data supported in JS, including arrays and other objects.
- Just like arrays it is possible to access inner properties by chaining multiple bracket notations or multiple dot notations.
- A key-value pair of an object can be removed with the use of the delete keyword (the obj is directly modified, objs are mutable):
    delete foods.apples;
- To check for the existence of a property it is used the .hasOwnProperty() method: foods.hasOwnProperty("apples")  \\ returns true/false
- Sometimes it is necessary to iterate through all the keys within an object. This is achieved with the special syntax called for...in
    statement:
        for (let food in foods) { do something... };    \\ the food variable is reset during each iteration
                                                        \\ objects do not maintain an ordering to stored keys like arrays do
- The Object.keys() method takes an object as the argument and returns an array of strings representig each property in the object.
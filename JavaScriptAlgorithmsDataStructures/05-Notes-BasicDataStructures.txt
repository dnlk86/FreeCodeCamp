- The array is a data structure, its simplest form is the one-dimensional array, meaning that it only has one level (no nested arrays 
    it only contains other valid JS data types).
- Multi-dimensional arrays ([]) contain other arrays or JS objects ({}).
- The fundamental feature of any data structure is, of course, the ability to not only store data, but to be able to retrieve that 
    data on command. This can be done with the bracket notation and the use of indexes in arrays (zero-indexed) for example.
    Pre-existing data can be also accessed and modified in the same way.
- Arrays are mutable, their content hence their length can be modified. Elements can be added with the methods .unshift() at the front
    and .push() at the end of the array. Both can add multiple elements at the same time.
- In the same way elements can be removed, from the front of the array with the .shift() method or from the end with the .pop() method.
    Both methods return the removed element. Both remove just one element at the time and do not take parameters.
- To remove any number of consecutive elements from anywhere in an array there is the method .splice() that takes two parameters,
    the index where to start removing (inclusive) and the number of consecutive elements to remove. The .splice() method both
    modifies the original array and also returns the removed elements in a new array.
- The third parameter that .splice() can accept is used to add new elements to the array. So the method allows to quickly switch out
    an element or a set of elements with a new one:
        arr.splice(startIndex, elementsToDelete, firstNewEl, secondNewEl, ..., nthNewEl);
- The .slice() method extracts/copies a subset of an array, not modifiying the original array it's called upon. It takes two parameters,
    the index where to start the extraction and the index where to stop (the element at this index is not included).
- On the other hand the spread operator (...arrName) allows to copy all the elements(just the content of the arr) of an array in order.
- A huge advantage of the spread operator is the possibility tom combine multiple arrays:
    const arr2 = [1, 2, "a", ...arr1, 3];       \\ note that ...arr1 are just the elements of arr1
- Since arrays are mutable data structures it's important to be able to verify the existence of elements. That is achieved by the 
    .indexOf() method, which takes an element as argument and returns the index of that element. In case the element is not found
    it returns -1.
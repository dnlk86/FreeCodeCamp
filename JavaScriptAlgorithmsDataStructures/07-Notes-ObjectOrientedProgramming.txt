- Real world objects are tangible things people can interact with.
- Objects in JS are used to model real-wold objects. They have properties with certain values and particular behaviors.
- The dot (.) notation used on the objects name followed by the name of the property grants access to the value stored for that property
    (myObj.propName).
- Methods are properties that are functions, those add different behavior to the object.
- Calling properties in object's methods directly with the obj name using the dot notation may cause problems. If the obj name is
    changed, then also the reference to the property inside the method has to be changed. A way to avoid this is by referencig to the
    object using the keyword "this":    this.propName.
- Constructors are functions that create new objects, they define properties and behaviors and do not return a value like a function might.
- Constructors are defined with capitalized names to distinguish them from other functions.
- Constructors use the keyword this to set properties of the object, this is a reference to the obj that is being created. 
- The "new" operator needs to be used when a constructor is invoked:
    const myDog = new Dog();    // this tell JS to create an instance of the obj Dog and store it in the variable myDog.
- Constructors like every function can accept arguments, so when the constructor is invoked the user can define right away
    the values of some object's properties (without needing to set those properties later with the dot notation).
- When a constructor is invoked the new object created is called an instance of the constructor (the constructor is like a cookie cutter).
    To verify if a certain object is an istance of a contructor there is the instanceof operator:
        doggy instanceof Dog;       // this evaluates to true or false
- The properties defined directly in the instance object (in the constructor?) are called own properties. Meaning that each different
    instance of the same object will have its own copies of these properties. This number of copied properties grows as fast as the number
    of objects instances grows.
- The use of prototype properties reduces the duplication of code. Properties in the prototype of an object are shared among all the
    instances of the object itself:     Dog.prototype.numLegs = 4;      // this prop is shared among all the dogs.
- Prototype properties are part of the constructor.
- To recap: Own properties are defined directly on the object instance itself. And prototype properties are defined on the prototype.
- To mention that the constructor itself is a property: beable.constructor === Dog evaluates to true, Dog is the constr. property.
- Properties can be added to the prototype one at the time, but after a few this process becomes tedious. Another way is to set the
    prototype to a new object instead that already contains the properties. This way the props are added all at once:
        Dog.prototype = {
            numlegs: 4,
            something: ...
        }
- By setting the prototype to a new object the constructor property of the object is erased. To avoid that the constructor property
    needs to be manually defined inside the prototype:
        Dog.prototype = {
            constructor: Dog,
            numLegs: 4,
            ...
        }
- An object inherits its prototype directly from the constructor function that created it (just like sons inherit genes from parents).
- All objects in JavaScript (with a few exceptions) have a prototype. Also, an objectâ€™s prototype itself is an object, this means
    that a prototype can have its own prototype:
        Object.prototype.isPrototypeOf(Dog.prototype);      \\ evaluates true
        Dog.prototype.isPrototypeOf(beagle);                \\ evaluates true
- In this prototype chain, Dog is the supertype for beagle, while beagle is the subtype. Object is a supertype for both Dog and beagle. 
    Object is a supertype for all objects in JavaScript. Therefore, any object can use the hasOwnProperty method.
- DRY (don't repeat yourself). Repeated code is more prone to error and bug fixing becomes more problematic.
- So far the creation of new instances of an object has been done with the "new" operator:
    let dog = new Animal();
    There is a better way in terms of inheritance to achieve this goal:
        let dog = Object.create(Animal.prototype);      \\ this creates a new obj (dog) and sets its prototype (to Animal)
    By doing this it is possible to access to the prototype methods for instance without having to re-declare them.
        dog instanceof Animal => true
- To achieve the full inheritance from the supertype to the subtype is necessary to set the prototype of the subtype equal to the
    prototype of the supertype, in other words:
        Dog.prototype = Object.create(Animal.prototype);    \\ now the recipe to create a Dog also includes all the key ingredients
                                                            \\ to create an Animal
- To sum up the whole process on inheritance, objects and prototypes:
    function Animal() { }                               \\ declaration of the Animal object (supertype)

    Animal.prototype = {                                \\ creation of the Animal prototype
    constructor: Animal,                                \\ declaration of the constructor property
    eat: function() {                                   \\ declaration of the eat method
        console.log("nom nom nom");
    }
    };

    function Dog() { }                                  \\ declaration of the Dog object (subtype)

    Dog.prototype = Object.create(Animal.prototype);    \\ creation of the Dog prototype that inherits from the Animal prototype

    let beagle = new Dog();                             \\ creation of an instance of the Dog object called beagle that inherits both from 
                                                        \\ Dog and from Animal, the beagle can use the .eat() method!
- One problematic that needs to be addressed is that now beagle inherits also the constructor from Animal, but its constructor should
    be Dog instead. To fix that the constructor in Dog needs to be set manually:
        Dog.prototype.constructor = Dog;
- A constructor function that inherits its prototype object from a supertype constructor function can still have its own methods in 
    addition to inherited methods:
        Dog.prototype.bark = function() { console.log("wof wof wof!"); };
- As seen child-objects inherit from their parent-object when when their prototype reference to their parent's prototype.
    It is possible to override the properties child inherits by re-declaring those properties in the child's prototype.
- Inheritance is not always the right solution with objects, expecially when two objects are not really related to each other (Bird, Airplane).
    In such cases it is best to use mixins, those are collections of functions shared by multiple unrelated objects:
        let glideMixin = function(obj) {            \\ declaring the mixin
            obj.glide = function() {
                console.log("I'm gliding!");
            }
        }

        glideMixin(bird);                           \\ applying the mixin to two unrelated objects
        glideMixin(boat);

        bird.glide();                               \\ invoking the method applied by the mixin to the two objects
        boat.glide();                               \\ now both objects have this method even if they're not related
- Closures protect properties within an object from being modified externally. This is achieved by creating a variable inside the
    constructor function, this changes the scope of the variable from public to private. Now only a function created in the same context
    of the variable can have access to the variable, hence only a privileged method can modify the variable. This way of structuring 
    the properties is called closure:
        function Bird() {
            // this.weight = 15;                    \\ declaring a property without closure
            let weight = 15;                        \\ declaring a variable with a scope limited to this constructor function

            this.getWeight = function() {           \\ declaring a privileged method to access the value of the variable
                return weight;                      \\ without accessing the variable directly
            }
        }
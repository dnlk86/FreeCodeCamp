- Comments in JavaScript: // single line, /* multiline */ .
- JavaScript has eight different data types: undefined, null, boolean, string, symbol, bigint, number, object.
- Variables allow computer to store data under a "label" and use the reference of that data in future operations
    rather than the data itself.
- Variables are declared with the keyword "var" and assigned with the "=" operator. Declaration and assignment can
    occur on the same line of code followed by a ";".
- It's common practice to initialize a variable on the same line it is declared.
- String or string literal is a series of zero or more characters enclosed in single or double quotes. It is  however important
    to be consistent, once a string starts in a certain manner it has to end the same way.
- When variables are first declared (and not assigned yet) they have the initial value of undefined.
- NaN stands for not a number and it is for example obtained by performing operations on undefined variables.
- In JS variables and function names are case sensitive. Best practice for variable names is to use lower camelCase.
- Declaring variables with the var keyword doesn't alert you in case of variable overwriting. Better use the let keyword 
    (introduced in ES6) in declarations, since it throws an error in the console if a variable is declared more than once.
- Variables can also be assigned with the const keyword. It has all the features that let has plus it is read only, it means
    that it cannot be modified and variables declared with const cannot be reassigned.
- It is common to name with uppercase variables declared with const.
- Number is the datatype used to represent numeric data.
- All the numeric operators can be applied to numbers.
- varName++ is used to increment a number by 1, it is the equivalent of writing varName = varName + 1.
- The same can be done with subtraction, varName-- .
- Floats or floating point numbers are decimal numbers. Integer and decimal part of the number are separated by a dot.
- Important to remember that decimal numbers are always finite numbers in computers, since computers have finite resources.
    The outcome of certain computations may differ from the expectations.
- The same calculations performed with integer numbers can also be performed with decimal numbers, the outcome of the calculation
    will be a float.
- The remainder operator % gives the remainder of the division of two numbers.
- In programming it is common to use assignments to modify the content of a variable. Everything to the right of the equal sign is
    evaluated first. Example: myVar = myVar + 5
- Certain operators do assignment and mathematical operation at the same time: myVar += 1 . Other operators are -=, *=, /= .
- In JS the backslash (\) used before a single or double quote indicates that the quote symbol (the quote is escaped) is char rather 
    than the start or the end of a string. Another way to achieve the same goal is to use one kind of quotes for the string start/end 
    and the other type as character.
- Other characters can be escaped inside strings: \' single quote, \" double quote, \\ backslash, \n newline, \r carriage return,
    \t tab, \b word boudary, \f form feed.
- In JS strings the + operator is called the concatenation opeartor and it is used to concatenate strings. The + operator does not
    add space between string, it has to be taken into account.
- Cancatenation can be also done with the += operator. This is really useful to break long strings into several lines.
- By using the + operator is possible also to include variables inside a concatenation statement.
- It is also possible to append variables to a string with the += operator.
- The length of a string can be found by using the .length method on the string itself. Note that also whitespace is counted.
- Bracket notation is a way to get access to a character at a specific index. JS like other modern programming languages uses
    zero-based indexing (indexes start at 0).
- In JS strings are immutable, this means we cannot re-assign a character at a certain index.
- In order to get the last char of a string: lastChar = myStr[myStr.length - 1] . The same principle can be applied also to nth-to-last.
- Arrays allow to store several pieces of data in one place. The array is declared with square brackets. The actual data goes inside
    and is comma separated. Arrays are zero-based indexed data structures. Arrays can contain different datatypes all at once. It is
    also possible to nest arrays within other arrays (that's called nesting and the array is called multi-dimensional).
- Unlike strings arrays are mutable (even if declared with const), it means that we can change the content at a certain index with 
    a left assigment operation: myArr[3] = "somethinNew"; .
- Accessing the data inside a multi-dimensional array (or array of arrays) is done by using the usual brackets notation with the 
    left-most set of brackets indicating the outer-most array and no space between one sets of brackets and the next.
- A way to append new data to an array is to use of the .push() method. As the name suggests the new element is passed as a parameter
    and pushed at the end of the array, becoming its new last element.
- The method pop() does the opposite of push(). As the name suggests it will remove the last element of an array and returns that element.
    The element can be stored in a new variable.
- The shift() method removes the first element of an array and returns it.
- Just like pop and push also the shift() method has an opposite called unshift(), which adds an element at the beginning of an array.
- Functions are reusable blocks of code. Functions can be called or invoked in JS by using their name follower by parentheses functionName(); .
- Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. The actual values 
    that are input (or "passed") into a function when it is called are known as arguments.
- The return keyword is used to pass the outcome of a function outside of the function body itself. This outcome can be stored in a variable
    or passed as an argument to another function.
- In Js scope refers to the visibility of a variable. Variables defined outside a function block have global scope, it means they can 
    be seen everywhere in your code.
- Variables declared without var, let or const are automatically created in the global scope. It's good practice not to do it.
- Variables declared inside a function and parameters as well have local scope, it means they are only visible inside the function body.
- Trying to access a variable from outside its scope will throw a ReferenceError: myVar is not defined;
- It is possible to have global and local variables with the same name. In this case the local one has the precedence.
- Functions can have a return statement but don't necessarily need to, in such case they will execute the code and return undefined.
- A queue in computer science is a data structure where items are kept in order. It's possible to add new elements at the end of the 
    queue or remove old items from the front of it.
- Boolean is a datatype that allowes only two values/states, which are mutually exlusive, true and false.
- If statements are used like in every other programming language to make decisions. The code within the curly braces of the if
    statement is executed only if the boolean condition/s within the paretheses is evaluated to true, otherwise the block is skipped.
- Comparison operators always evaluate to a boolean in JS. The most basic is the equality operator (==). In order for JS to compare 
    two different datatypes (3 == '3'), it attempts to convert both values being compared to a common type (it's called type coercion).
- Strict equality (===) does not perform any kind of conversion (only 3 === 3 evaluates true).
- In JavaScript, you can determine the type of a variable or a value with the typeof operator. It returns the datatype as a string.
- Exists also an inequality operator (!=) and a strict inequality (!==).
- Other operators are >, >=, <, <=. Note that they always perform a conversion (7  > '3' = true).
- Regex are used in programming to match parts of strings with certain patterns. Quotation marks are not required in regex syntax.
- JS offers multiple ways to use regular expressions, one of those is the .test() method, it takes a string as parameter
    and applies it to a regex and returns true or false.
- To find a word in a string the regex is /someWord/ (no quote marks):
    let someString = "this is some random text";
    let someWord /some/;
    someWord.test(someString);          \\ in this case it returns true
- The /someWord/ regex searches for a literal match, also the letter case matters here.
- It is possible to search for multiple patterns using the alternation or OR operator: |. This operator matches patterns either before
    or after it, for example:
        /yes|no|maybe/                  \\ it tries to match one of those patterns
- Multiple cases can be matched by adding a so called flag to the regex. By adding the (i) flag is possible to match strings regardless
    the letter case:
        /ignoreCase/i
- Matches found with the .test() method (it returns true/false) can be actually extracted with the .match() method, it takes a Regex
    as a argument and is applied to a string:
        "Hello World".match(/Hello/);   \\ it returns an array with the found matches, in this case ["Hello"]
- To extract all the matches found for a certain pattern the global search flag (g) can be used:
    "repeat repeat repeat".match(/repeat/);         \\ it returns ["repeat", "repeat", "repeat"]
- Flags can be combined with each other.
- The wildcard character (.) is used when not all the exact characters in the pattern are known. The wildcard also called dot or period 
    will match any one char:
        let huRegex = /hu./;        \\ this regex will match "hug", "hut", "huh", "hum" and so on
- Character classes(sets) add some flexibility to literal pattern searches. They allow you to define a group of characters you wish to match
    by placing them inside square brackets:
        let bgRegex = /b[aiu]g/;    \\ it will match "bag", "big" and "bug"
- Inside a character set is possible to define a range by using a hyphen between the starting and ending char, for example [a-e] to match
    the characters from a to e.
- Hyphen usage can be also applied to a range of numbers, ex. [0-9]. It's also possible to combine letters and numbers, ex. /[a-z0-9]/ig.
- The caret character (^) allows to create negated character sets with the following syntax:
    const myRegex = /[^aeiou]/gi    \\ it searches globally and indipendet from case char that are not aeiou. 
- The plus (+) character allows to search for repeated characters, or groups of them, that appear one or more times subsequently: /a+/g
- The asterisk character (*) looks for characters that occur zero or more times: /a*/
- Greedy and lazy matching are the two possbile ways regular expressions behave. The first one is the default. It looks for the longest
    possible part of the string that fits the regex pattern and returns it as a string. The lazy match looks for the shortest possible
    match to the regular expression. For example in the string "titanic" with a regex like /t[a-z]*i/ greedy match will return the
    string ["titani"] since the * char will look for the max number of char in between t and the final i. If we want to apply lazy
    matching the we need to add the question mark character (?) in the regex: /t[a-z]*?i/, that will return ["ti"].
- As seen before the caret (^) is used to create negated charater sets. Outside character sets it is used to search for patterns at
    the beginning of strings. 
- The dollar sign ($) can be use to search patterns at the end of strings: /pattern$/.
- The shortcut \w matches all possible char of the alphabet, lower and uppercase, all the numbers and underscores as well: [a-zA-Z-0-9_]
    It is called shorthand character classes.
- The opposite of \w searches for all the non-alphanumeric characters: \W = [^a-zA-Z0-9_].
- A shortcut to match all the numbers and digits is: \d = [0-9].
- All non-numbers characters can be searched with the following shorthand: \D = [^0-9].
- It's possible to match any kind of white space, carriage return, tab, form feed and newline characters with the shortcut \s, 
    it works similarly to the character class [\r\t\f\n\v].
- Just like other shorthands it is possible to search for everything except whitespace with \S (uppercase S) [^ \r\t\f\n\v].
- Quantity specifiers allow to specify the lower and upper number of patterns to match. The syntax is {lowerNum, upperNum}.
    For example: /a{3,5}h/      \\ in this case the match will be found if "a" appers from 3 to 5 times in a string followed by "h".
- It's also possible to specify only the lower number of patterns: /a{3,}h/     \\ here the min is 3, no upper bound
- By putting just one value within the curly braces will be specified the exact number of patterns needed to have a match: /ha{3}h/.
- The question mark (?) allows to check for the existence of an element, it checks for zero or one of the preceding element.
    The meaning of this symbol is like saying that the previous element is optional.
- Lookaheads are patterns that tell JS to look-ahead in the string to check for a pattern further along (they work like an if statement?).
    Lookaheads can be positive (?=...) in case they check for the existence of a pattern, or negative (?!...) in case they check
    for the non-existence of a pattern. Both type of lookaheads do not return the pattern of the string they are checking.
- To check for groups of characters parentheses are used (). To find either "Penguin" or (|) "Pumpkin": /P(engu|umpk)in/g
- Capture groups allow to match substrings that occur multiple times in a string. Capture groups are constructed by enclosing the
    regex pattern to capture in parentheses. The substring captured is saved to a temporary variable which can be accessed within
    the same regex using a backslash and the number of the capture group (those are numbered from left to right starting at 1): 
            /(\w+) \1 \1/           \\ it matches a word that occurs three times in a row, \1 is the capture group (there's only one).
            /^(\d+)(\s)\1\2\1$/g    \\ it matches 3 identical groups of numbers separated by one space.
- Searches can be even more powerful by changing or replacing the text matched. The .replace() method can take a regex as first parameter
    and the text to replace as second:
        "Code Camp".replace(/(\w+)\s(\w+)/, '$2 $1');       \\ capture groups can be accessed also with dollar signs ($)
                                                            \\ $1 = "Code"
                                                            \\ $2 = "Camp"

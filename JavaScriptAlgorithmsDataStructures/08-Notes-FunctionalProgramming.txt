- Functional programming is a programming style where the code is constituted by isolated pure functions (same input produces always same 
    output), there is no dependence on the state of the program (including global variables that are subject to change). Changes of the
    state of the program outside the functions are carefully controlled.
- Callbacks are the functions that are passed into another function to decide the invocation and the behavior of that function.
- Functions that can be stored in variables, passed to or returned from other functions are called first class functions.
    Those functions that are passed to or returned from another functions can also be called a lambda.
- Functions that accept or return other functions are called higher order functions.
- Functional programming is in general a good habit, it keeps the code clean and easy to manage and prevents from sneaky bugs.
- Imperative style of programming is the one that gives the computer a set of statements to perform a task (a classic example is writing 
    a for loop that gives exact directions to iterate over the indices of an array).
- Declarative programming, the one used in functional programming, tells the computer what has to be done by calling methods or functions.
    In this case instead of using a for loop the choice is to use for example the map() method that handles the iteration of an array.
- One of the core principles in functional programming is to not change things, changes lead to bugs. In FP changing things is called 
    mutation and the outcome is called side effect. Ideally a function is a pure function and has no side effects.
- Another principle of FP is to always declare the dependencies explicitly. If a functions relies on a value that leaves outside the
    the function body, this value has to be passed as an argument to the function.
- Functions in JS are first class objects, this means that they can be used as any other object.
- the Array mrthod .filter() calls a callback function on every item in an array and returns a new array containing only the elements
    for which the callback function return true. Like map() it accepts three arguments, the current value, the current index and the 
    array upon it is used.
- The .slice() method return a copy of certain elements of an array, it takes two arguments, the starting index and the ending index
    (not inclusive). If the arguments are not provided it makes a copy of the whole array. If just one is provided makes a copy from 
    the starting index till the end of the array.
- The .splice() method is used to remove parts of an array, unlike .slice() however it modifies the original array. Like slice it
    takes a starting index. The second arguments it takes is the number of consecutive elements to remove. It accepts also as third
    argument element or elements to add in the array in place of what has been removed (one or more comma separated elements can be
    added).
- The .concat() method, that works both on strings and arrays, joins two arrays/strings together. It is called to an item and the
    second one to join is passed as an argument to the method. A new item is returned, so neither of the original two is modified.
- Func programming is all about creating and using non-mutating functions, so .concat() is prefered to .push().
- The .sort() method as the name says sorts the elements of an array based on the callback function that accepts as argument. The callback
    function is called compareFunction. Since JavaScript's default sorting method is by string Unicode point value it is always
    better to pass a compareFunction when sorting an array to prevent unexpected behavior:
        function alphabeticalOrder(arr) {
            return arr.sort((a,b) => (a===b ? 0 : a<b ? -1 : 1));       \\ passed a compare function to sort the array ascending
        }
- Side effect of the sort method is that it mutates the original array (against functional programming principles). To avoid that
    is to copy the content of the array in a new one, or to concatenate an empty array to one being sorted with slice() or concat():
        function nonMutatingSort(arr) {
            let res = [...arr];                                         \\ coping the content in a new arr with the spread operator
            return res.sort((a,b) => (a===b ? 0 : a<b ? -1 : 1));
        }
- The .split() method splits a string into an array of strings based on the delimiter that is passed as argument. The delimiter is a
    character, or a regular expression. In case nothing is passed the string is turned into an array of characters:
        "some text bla bla".split(" ");                                 \\ in this case the result is an array of words.
    Note that strings are immutable so the original string won't be modified:
        function splitify(str) {
            return str.split(/\W/gi);
        }

        splitify("Hello World,I-am code")   ->   [ 'Hello', 'World', 'I', 'am', 'code' ]
